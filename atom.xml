<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>G&amp;T</title>
  
  <subtitle>技术其实只是解决问题的工具,是抽象的锤头、锯子,并没什么了不起,而真正振奋人心的是用技术提升了百万人的生活品质</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://justknow23.github.io/"/>
  <updated>2021-03-22T15:45:12.475Z</updated>
  <id>http://justknow23.github.io/</id>
  
  <author>
    <name>GengTao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>phpstorm-xdebug</title>
    <link href="http://justknow23.github.io/2019/11/16/phpstorm-xdebug/"/>
    <id>http://justknow23.github.io/2019/11/16/phpstorm-xdebug/</id>
    <published>2019-11-16T19:47:32.000Z</published>
    <updated>2021-03-22T15:45:12.475Z</updated>
    
    <content type="html"><![CDATA[<p>说明：本文针对已经了解php及其扩展安装的同学，安装扩展过程不再这里赘述。<br>另外本文针对使用docker，php-fpm、nginx-7.3的镜像。<br>手册：<a href="https://xdebug.org/" target="_blank" rel="noopener">https://xdebug.org/</a></p><p>一、什么是xdebug<br>Xdebug是一个开放源代码的PHP程序调试器(即一个Debug工具)，可以用来跟踪，调试和分析PHP程序的运行状况。<br>在追踪底层源码调用顺序的时候，xdebug是不可或缺的工具。<br>二、xdebug原理<br>1,IDE（如PhpStorm）已经集成了一个遵循BGDP的Xdebug插件，当开启它的时候， 会在本地开一个xdebug调试服务，<br>监听在调试器中所设置的端口上，默认是9000(我这里设置了9001)，这个服务就会监听所有到9000端口的链接。<br>在PhpStorm中，位于：工具栏 &gt; Run &gt; Start / Stop Listening for PHP Xdebug Connetions。<br>2,当浏览器发送一个带XDEBUG_SESSION_START的参数的请求到服务器时，服务器接受后将其转到后端的php处理，<br>如果php开启了xdebug模块，则会将debug信息转发到客户端IP的IDE的调试端口上。<br>当参数或者cookie信息中不带XDEBUG_SESSION_START，则不会启动调试。这就为后续在浏览器中添加开关提供了可能。</p><p>3,Xdebug的官方给出了一个示例图：很好的展示了相互调用关系。<br>这个示例图是绑定了ip，即使用了固定ip地址，xdebug.remote_connect_back = 0 ，也是 xdebug 的默认方式，这种情况下，xdebug 在收到调试通知时会读取配置 xdebug.remote_host 和 xdebug.remote_port ，默认是 localhost:9000，然后向这个端口发送通知，这种方式只适合单一客户端开发调试。<br><img src="/images/xdebug1.gif" alt="logo"><br><img src="/images/xdebug2.png" alt="logo"></p><p>三、安装前<br>1.php安装xdebug扩展 xdebug.so<br>2.确认本地环境可安装xdebug版本 <a href="https://xdebug.org/wizard" target="_blank" rel="noopener">https://xdebug.org/wizard</a><br>3.phpxdebug扩展安装成功如图<br><img src="/images/xdebug.png" alt="logo"><br>4.扩展配置</p><pre><code>zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20160303/xdebug.so #扩展安装位置xdebug.remote_enable=1  #开启xdebugxdebug.remote_host=192.168.15.113  #如果是docker镜像 请使用本机ip，其他可使用127.0.0.1xdebug.remote_port=9001 #告诉php把调试数据上报到哪个监听端口xdebug.trace_enable_trigger=onxdebug.collect_params=4xdebug.collect_return=onxdebug.show_mem_delta=onxdebug.trace_output_dir=&quot;/alidata/xdebug/x-trace&quot;xdebug.profiler_output_name = cachegrind.out.%t.%pxdebug.profiler_enable_trigger= onxdebug.profiler_output_dir=&quot;/alidata/xdebug/x-profiler&quot;</code></pre><p>四、phpstorm配置<br><img src="/images/phpstorm1.png" alt="logo"><br><img src="/images/phpstorm2.png" alt="logo"><br><img src="/images/phpstorm3.png" alt="logo"><br><img src="/images/phpstorm4.png" alt="logo"><br><img src="/images/phpstorm5.png" alt="logo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说明：本文针对已经了解php及其扩展安装的同学，安装扩展过程不再这里赘述。&lt;br&gt;另外本文针对使用docker，php-fpm、nginx-7.3的镜像。&lt;br&gt;手册：&lt;a href=&quot;https://xdebug.org/&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://justknow23.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Auto狂拽酷炫吊炸天</title>
    <link href="http://justknow23.github.io/2019/11/01/auto-zhuai/"/>
    <id>http://justknow23.github.io/2019/11/01/auto-zhuai/</id>
    <published>2019-11-01T23:47:01.000Z</published>
    <updated>2021-03-22T15:45:12.475Z</updated>
    
    <content type="html"><![CDATA[<ul><li>高端大气上档次,低调奢华有内涵，</li><li>奔放洋气有深度,简约时尚国际范，</li><li>低端粗俗甩节操,土憋矫情无下限，</li><li>装模作样绿茶婊,外猛内柔女汉子，</li><li>卖萌嘟嘴剪刀手,忧郁深沉无所谓，</li><li>狂拽帅气屌炸天,冷艳高贵接地气，</li><li>时尚亮丽小清新,可爱乡村非主流，</li><li>贵族王朝杀马特,提莫团战必须死。</li></ul><p><img src="/images/zhuai1.gif" alt="logo"><br><img src="/images/zhuai2.gif" alt="logo"><br>下载地址：<a href="https://xclient.info/s/atom.html" target="_blank" rel="noopener">https://xclient.info/s/atom.html</a><br>插件安装：<a href="https://github.com/JoelBesada/activate-power-mode" target="_blank" rel="noopener">https://github.com/JoelBesada/activate-power-mode</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;高端大气上档次,低调奢华有内涵，&lt;/li&gt;
&lt;li&gt;奔放洋气有深度,简约时尚国际范，&lt;/li&gt;
&lt;li&gt;低端粗俗甩节操,土憋矫情无下限，&lt;/li&gt;
&lt;li&gt;装模作样绿茶婊,外猛内柔女汉子，&lt;/li&gt;
&lt;li&gt;卖萌嘟嘴剪刀手,忧郁深沉无所谓，&lt;/li&gt;
&lt;li&gt;狂
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://justknow23.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核</title>
    <link href="http://justknow23.github.io/2019/11/01/linux-nei-he/"/>
    <id>http://justknow23.github.io/2019/11/01/linux-nei-he/</id>
    <published>2019-11-01T23:42:34.000Z</published>
    <updated>2021-03-22T15:45:12.475Z</updated>
    
    <content type="html"><![CDATA[<p>一、内核和进程描述<br>内核由一系列程序组成，包括负责响应中断的中断服务程序、负责管理多个进程从而分享处理器时间的调度程序、负责管理地址空间的内存管理程序、网络、进程间通信的系统服务程序等。<br><img src="/images/内核.png" alt="logo"><br><img src="/images/进程.png" alt="logo"></p><p>二、Oh My Zsh<br>Zsh is a shell designed for interactive use, although it is also a powerful scripting language.Many of the useful features of bash, ksh, and tcsh were incorporated into zsh; many original features were added.<br>（Zsh 是为交互使用而设计的一款shell，同时它也是一个强大的脚本语言。很多其他shell的特性, 比如bash、ksh、tcsh, 都被整合到了Zsh中, 并且还添加了很多新的特性）</p><p>Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout…<br>（Oh My Zsh是一个令人愉快的、开源的、社区驱动的Zsh配置管理框架。它配置了成吨的有用的函数、帮助信息、主题，还有一些令你尖叫的东西。）<br>安装</p><p>1.chsh -s /bin/zsh</p><p>2.git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</p><p>3.cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</p><p>4.cd oh-my-zsh/tools &amp;&amp; ./install.sh</p><p>5.upgrade_oh_my_zsh</p><p>或者</p><p>sh -c “$(wget <a href="https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh" target="_blank" rel="noopener">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a> -O -)”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、内核和进程描述&lt;br&gt;内核由一系列程序组成，包括负责响应中断的中断服务程序、负责管理多个进程从而分享处理器时间的调度程序、负责管理地址空间的内存管理程序、网络、进程间通信的系统服务程序等。&lt;br&gt;&lt;img src=&quot;/images/内核.png&quot; alt=&quot;logo&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://justknow23.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>vim 入坑</title>
    <link href="http://justknow23.github.io/2019/11/01/vim/"/>
    <id>http://justknow23.github.io/2019/11/01/vim/</id>
    <published>2019-11-01T23:38:13.000Z</published>
    <updated>2021-03-22T15:45:12.475Z</updated>
    
    <content type="html"><![CDATA[<p>Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性</p><p>对于一个重度使用者，就因为喜欢这种双手不离键盘就可以操控一切的feel，Vim 可以让我对文本的操作更加精准、高效。</p><ol><li><p>vim模式<br>正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空<br>插入模式（按i进入） 左下角显示–INSERT–<br>可视模式（按v进入） 左下角显示–VISUAL–</p></li><li><p>打开文件</p><h1 id="打开单个文件"><a href="#打开单个文件" class="headerlink" title="打开单个文件"></a>打开单个文件</h1><p>vim file    </p><h1 id="同时打开多个文件"><a href="#同时打开多个文件" class="headerlink" title="同时打开多个文件"></a>同时打开多个文件</h1><p>vim file1 file2..  </p><h1 id="在vim窗口中打开一个新文件"><a href="#在vim窗口中打开一个新文件" class="headerlink" title="在vim窗口中打开一个新文件"></a>在vim窗口中打开一个新文件</h1><p>:open [file]       </p></li></ol><p>【举个例子】</p><h1 id="当前打开1-txt，做了一些编辑没保存"><a href="#当前打开1-txt，做了一些编辑没保存" class="headerlink" title="当前打开1.txt，做了一些编辑没保存"></a>当前打开1.txt，做了一些编辑没保存</h1><p>:open!         放弃这些修改，并重新打开未修改的文件</p><h1 id="当前打开1-txt，做了一些编辑并保存"><a href="#当前打开1-txt，做了一些编辑并保存" class="headerlink" title="当前打开1.txt，做了一些编辑并保存"></a>当前打开1.txt，做了一些编辑并保存</h1><p>:open 2.txt    直接退出对1.txt的编辑，直接打开2.txt编辑，省了退出:wq再重新vim 2.txt的步骤</p><h1 id="打开远程文件，比如ftp或者share-folder"><a href="#打开远程文件，比如ftp或者share-folder" class="headerlink" title="打开远程文件，比如ftp或者share folder"></a>打开远程文件，比如ftp或者share folder</h1><p>:e <a href="ftp://192.168.10.76/abc.txt" target="_blank" rel="noopener">ftp://192.168.10.76/abc.txt</a><br>:e \qadrive\test\1.txt</p><h1 id="以只读形式打开文件，但是仍然可以使用-wq-写入"><a href="#以只读形式打开文件，但是仍然可以使用-wq-写入" class="headerlink" title="以只读形式打开文件，但是仍然可以使用 :wq! 写入"></a>以只读形式打开文件，但是仍然可以使用 :wq! 写入</h1><p>vim -R file</p><h1 id="强制性关闭修改功能，无法使用-wq-写入"><a href="#强制性关闭修改功能，无法使用-wq-写入" class="headerlink" title="强制性关闭修改功能，无法使用 :wq! 写入"></a>强制性关闭修改功能，无法使用 :wq! 写入</h1><p>vim -M file</p><ol start="3"><li><p>插入命令<br>i 在当前位置生前插入<br>I 在当前行首插入<br>a 在当前位置后插入<br>A 在当前行尾插入<br>o 在当前行之后插入一行<br>O 在当前行之前插入一行</p></li><li><p>查找命令<br>最简单的查找<br>/text&emsp;&emsp;查找text，按n健查找下一个，按N健查找前一个。<br>?text&emsp;&emsp;查找text，反向查找，按n健查找下一个，按N健查找前一个。<br>vim中有一些特殊字符在查找时需要转义&emsp;&emsp;.*[]^%/?~$</p></li></ol><p>:set ignorecase&emsp;&emsp;忽略大小写的查找<br>:set noignorecase&emsp;&emsp;不忽略大小写的查找<br>复制代码<br>快速查找，不需要手打字符即可查找</p><ul><li>向后（下）寻找游标所在处的单词<h1 id="向前（上）寻找游标所在处的单词"><a href="#向前（上）寻找游标所在处的单词" class="headerlink" title="向前（上）寻找游标所在处的单词"></a>向前（上）寻找游标所在处的单词</h1>以上两种查找，n,N 的继续查找命令依然可以适用</li></ul><p>5.替换命令<br>~  反转游标字母大小写<br>r&lt;字母&gt;           将当前字符替换为所写字母<br>R&lt;字母&gt;&lt;字母&gt;…  连续替换字母<br>cc    替换整行（就是删除当前行，并在下一行插入）<br>cw    替换一个单词（就是删除一个单词，就进入插入模式），前提是游标处于单词第一个字母（可用b定位）<br>C     (大写C)替换至行尾（和D有所区别，D是删除（剪切）至行尾，C是删除至行位并进入插入模式）<br>:s/old/new/    用old替换new，替换当前行的第一个匹配<br>:s/old/new/g   用old替换new，替换当前行的所有匹配<br>:%s/old/new/   用old替换new，替换所有行的第一个匹配<br>:%s/old/new/g  用old替换new，替换整个文件的所有匹配<br>:10,20 s/^/ /g 在第10行至第20行每行前面加四个空格，用于缩进。<br>ddp    交换光标所在行和其下紧邻的一行。</p><ol start="6"><li><p>撤销与重做<br>u 撤销（Undo）<br>U 撤销对整行的操作<br>Ctrl + r 重做（Redo），即撤销的撤销。</p></li><li><p>删除命令<br>需要说明的是，vim 其实并没有单纯的删除命令，下面你或许理解为剪切更加准确。以字符为单位删除<br>x   删除当前字符<br>3x  删除当前字符3次<br>X   删除当前字符的前一个字符。<br>3X  删除当前光标向前三个字符<br>dl  删除当前字符， dl=x<br>dh  删除前一个字符，X=dh<br>D   删除当前字符至行尾。D=d$<br>d$ 删除当前字符至行尾<br>d^  删除当前字符之前至行首</p></li><li><p>复制粘贴<br>普通模式中使用y复制<br>yy   复制游标所在的整行（3yy表示复制3行）<br>y^   复制至行首，或y0。不含光标所在处字符。<br>y$   复制至行尾。含光标所在处字符。<br>yw   复制一个单词。<br>y2w  复制两个单词。<br>yG   复制至文本末。<br>y1G  复制至文本开头。</p></li><li><p>区域选择<br>要进行区域选择，要先进入可视模式<br>v   以字符为单位，上下左右选择<br>V   以行为单位，上下选择<br>选择后可进行操作<br>d   剪切/删除<br>y   复制<br>Ctrl+v   如果当前是V(大写)模式，就变成v(小写)<br>如果当前是v(小写)模式，就变成普通模式。<br>如果当前是普通模式，就进入v(小写)模式<br>利用这个，可以进行多行缩进。<br>ggVG   选择全文</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性&lt;/p&gt;
&lt;p&gt;对于一个重度使用者，就因为喜欢这种双手不离键盘就可以操控一切的feel，Vim 可以让我对文本的操作更加精准、高效。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;vim模式
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://justknow23.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>php常用排序算法</title>
    <link href="http://justknow23.github.io/2019/03/01/suanfa/"/>
    <id>http://justknow23.github.io/2019/03/01/suanfa/</id>
    <published>2019-03-01T09:50:15.000Z</published>
    <updated>2021-03-22T15:45:12.475Z</updated>
    
    <content type="html"><![CDATA[<ul><li>php 四种排序算法的时间与内置的sort排序比较</li><li>3000个元素，四种算法的排序所用的时间比较</li><li>冒泡排序 857.98192024231ms</li><li>选择排序 903.74493598938ms</li><li>插入排序 296.8270778656ms</li><li>快速排序 15.607833862305ms</li><li>sort排序 0.95200538635254ms</li><li>归并排序 14.61386680603ms</li><li>@param 冒泡排序</li><li>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</li><li>走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。<pre class=" language-php"><code class="language-php">  <span class="token keyword">function</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//本趟排序开始前，交换标志应为假</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$k</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$k</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//从小到大排序</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>                  <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$flag</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li>@param 选择排序法</li><li>每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。</li><li>选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）<pre class=" language-php"><code class="language-php">  <span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token variable">$minVal</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//假设$i就是最小值</span>          <span class="token variable">$minValIndex</span> <span class="token operator">=</span> <span class="token variable">$i</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$minVal</span> <span class="token operator">></span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//从小到大排列</span>                  <span class="token variable">$minVal</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//找最小值</span>                  <span class="token variable">$minValIndex</span> <span class="token operator">=</span> <span class="token variable">$j</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$minValIndex</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$minValIndex</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$temp</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li>插入排序法</li><li>每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</li><li>算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。<pre class=" language-php"><code class="language-php">  <span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//从小到大排列</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token variable">$insertVal</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$insertVal是准备插入的数</span>          <span class="token variable">$insertIndex</span> <span class="token operator">=</span> <span class="token variable">$i</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//有序表中准备比较的数的下标</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$insertIndex</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$insertVal</span> <span class="token operator">&lt;</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$insertIndex</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$insertIndex</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$insertIndex</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将数组往后挪</span>              <span class="token variable">$insertIndex</span><span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将下标往前挪，准备与前一个进行比较</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$insertIndex</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!==</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$insertIndex</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$insertVal</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>`</code></pre></li><li>快速排序法</li><li>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，</li><li>然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<pre class=" language-php"><code class="language-php">  <span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token variable">$array</span><span class="token punctuation">;</span>      <span class="token variable">$mid</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token variable">$leftArray</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token variable">$rightArray</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">></span> <span class="token variable">$mid</span><span class="token punctuation">)</span>              <span class="token variable">$rightArray</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$v</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">&lt;</span> <span class="token variable">$mid</span><span class="token punctuation">)</span>              <span class="token variable">$leftArray</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$v</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token variable">$leftArray</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token variable">$leftArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token variable">$leftArray</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$mid</span><span class="token punctuation">;</span>      <span class="token variable">$rightArray</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token variable">$rightArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$leftArray</span><span class="token punctuation">,</span><span class="token variable">$rightArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>`</code></pre></li><li>归并排序</li><li>归并排序是指将两个或两个以上有序的数列（或有序表），合并成一个仍然有序的数列（或有序表）。</li><li>这样的排序方法经常用于多个有序的数据文件归并成一个有序的数据文件。<pre class=" language-php"><code class="language-php">  <span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">mSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>`</code></pre></li><li>实际实现归并排序的程序<pre class=" language-php"><code class="language-php">  <span class="token keyword">function</span> <span class="token function">mSort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$left</span><span class="token punctuation">,</span> <span class="token variable">$right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$left</span> <span class="token operator">&lt;</span> <span class="token variable">$right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token variable">$center</span> <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token operator">+</span><span class="token variable">$right</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">mSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$left</span><span class="token punctuation">,</span> <span class="token variable">$center</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">mSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$center</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">mergeArray</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$left</span><span class="token punctuation">,</span> <span class="token variable">$center</span><span class="token punctuation">,</span> <span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>`</code></pre></li><li>将两个有序数组合并成一个有序数组<pre class=" language-php"><code class="language-php">  <span class="token keyword">function</span> <span class="token function">mergeArray</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$left</span><span class="token punctuation">,</span> <span class="token variable">$center</span><span class="token punctuation">,</span> <span class="token variable">$right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$a_i</span> <span class="token operator">=</span> <span class="token variable">$left</span><span class="token punctuation">;</span>      <span class="token variable">$b_i</span> <span class="token operator">=</span> <span class="token variable">$center</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$a_i</span><span class="token operator">&lt;=</span><span class="token variable">$center</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$b_i</span><span class="token operator">&lt;=</span><span class="token variable">$right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$a_i</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$b_i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$a_i</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$b_i</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$a_i</span> <span class="token operator">&lt;=</span> <span class="token variable">$center</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$a_i</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$b_i</span> <span class="token operator">&lt;=</span> <span class="token variable">$right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$b_i</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token operator">+</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;php 四种排序算法的时间与内置的sort排序比较&lt;/li&gt;
&lt;li&gt;3000个元素，四种算法的排序所用的时间比较&lt;/li&gt;
&lt;li&gt;冒泡排序 857.98192024231ms&lt;/li&gt;
&lt;li&gt;选择排序 903.74493598938ms&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://justknow23.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>将CSV文件导入表中</title>
    <link href="http://justknow23.github.io/2019/01/15/csv2mysql/"/>
    <id>http://justknow23.github.io/2019/01/15/csv2mysql/</id>
    <published>2019-01-15T21:26:17.000Z</published>
    <updated>2021-03-22T15:45:12.475Z</updated>
    
    <content type="html"><![CDATA[<p>LOAD DATA INFILE 语句可以读取文本文件并导入数据库中。</p><p>在导入文件之前，你需要做如下准备：</p><p>导入文件的目标数据库<br>csv文件的列与目标数据库表的列的数量相同，并且每列的数据类型相同。<br>有插入数据权限的账户.<br>假设我们有数据表，命名位discounts有如下结构:</p><p>用 CREATE TABLE statement 创建discounts 如代码:</p><pre><code>CREATE TABLE discounts (id INT NOT NULL AUTO_INCREMENT,title VARCHAR(255) NOT NULL,expired_date DATE NOT NULL,amount DECIMAL(10 , 2 ) NULL,PRIMARY KEY (id));</code></pre><p>文件discounts.csv文件包含第一行作为列名，其他行作为数据，<br>用以下语句来完成导入功能，例： c:\tmp\discounts.csv文件discounts表中；</p><p>LOAD DATA INFILE ‘c:/tmp/discounts.csv’<br>INTO TABLE discounts<br>FIELDS TERMINATED BY ‘,’ #分隔符<br>ENCLOSED BY ‘“‘ #结尾符<br>LINES TERMINATED BY ‘\n’ #换行</p><p>IGNORE 1 ROWS; #忽略csv文件的第一行文件。<br>csv文件中，每列用逗号来分隔’,’ 用双引号’” ‘作为数据全文的结尾符。.<br>所有的 CSV 文件都是用 ‘\n’ 换行。.<br>因为文件第一行包含列名，所以，不应该导入数据表中，这里用 IGNORE 1 ROWS option.语句忽略第一行，保证不导入。<br>现在，我们可查看 discounts 表 看数据是否导入。</p><p>SELECT * FROM discounts;<br>导入数据过程中变更数据格式：<br>有时候，我们要导入的数据不符合目标数据的格式，简单的解决方式，你可以在导入数据过程中用set语句改变导入数据的格式；</p><p>expired date 数据是 mm/dd/yyyy 格式如下：</p><p>在导入过程中用str_to_date()函数来解决这个问题：</p><p>LOAD DATA INFILE ‘c:/tmp/discounts_2.csv’<br>INTO TABLE discounts<br>FIELDS TERMINATED BY ‘,’ ENCLOSED BY ‘“‘<br>LINES TERMINATED BY ‘\n’<br>IGNORE 1 ROWS<br>(title,@expired_date,amount)<br>SET expired_date = STR_TO_DATE(@expired_date, ‘%m/%d/%Y’);<br>远程客户端导入数据<br>在本地电脑导入数据到远端的服务器，同样用LOAD DATA INFILE语句</p><p>当加入 LOCAL 参数在 LOAD DATA INFILE语句中 , 客户端会自动读取本地文件，然后将读取的数据发送到服务器端，文件会上传到服务器，临时文件在, C:\windows\temp on Windows 或 /tmp on Linux. 此文件不可配置或变更（新版本解除限制）</p><p>举例：<br>LOAD DATA LOCAL INFILE ‘c:/tmp/discounts.csv’<br>INTO TABLE discounts<br>FIELDS TERMINATED BY ‘,’<br>ENCLOSED BY ‘“‘<br>LINES TERMINATED BY ‘\n’<br>IGNORE 1 ROWS;<br>唯一一点不同就是用 LOCAL 参数，如果上传较大的文件，可能会慢一点，毕竟需要将文件上传到服务器需要时间。</p><p>通过本地上传文件不需要服务器的特别权限，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;LOAD DATA INFILE 语句可以读取文本文件并导入数据库中。&lt;/p&gt;
&lt;p&gt;在导入文件之前，你需要做如下准备：&lt;/p&gt;
&lt;p&gt;导入文件的目标数据库&lt;br&gt;csv文件的列与目标数据库表的列的数量相同，并且每列的数据类型相同。&lt;br&gt;有插入数据权限的账户.&lt;br&gt;假设
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://justknow23.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git技能持续更新</title>
    <link href="http://justknow23.github.io/2018/08/02/git-base/"/>
    <id>http://justknow23.github.io/2018/08/02/git-base/</id>
    <published>2018-08-02T15:07:34.000Z</published>
    <updated>2021-03-22T15:45:12.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-基础命令"><a href="#一、-基础命令" class="headerlink" title="一、 基础命令"></a>一、 基础命令</h3><ul><li>git branch 查看本地所有分支</li><li>git status 查看当前状态</li><li>git commit 提交</li><li>git branch -a 查看所有的分支</li><li>git branch -r 查看远程所有分支</li><li>git commit -am “init” 提交并且加注释</li><li>git push origin master 将文件给推到服务器上</li><li>git remote show origin 显示远程库origin里的资源</li><li>git push origin master:hb-dev 将本地库与服务器上的库进行关联</li><li>git checkout –track origin/dev 切换到远程dev分支</li><li>git branch -D master develop 删除本地库develop</li><li>git checkout -b dev 建立一个新的本地分支dev</li><li>git merge origin/dev 将分支dev与当前分支进行合并</li><li>git checkout dev 切换到本地dev分支</li><li>git remote show 查看远程库</li><li>git config –list 看所有用户</li><li>git ls-files 看已经被提交的</li><li>git rm [file name] 删除一个文件</li><li>git commit -a 提交当前repos的所有的改变</li><li>git add [file name] 添加一个文件到git index</li><li>git commit -v 当你用－v参数的时候可以看commit的差异</li><li>git commit -m “This is the message describing the commit” 添加commit信息</li><li>git commit -a -a是代表add，把所有的change加到git index里然后再commit</li><li>git commit -a -v 一般提交命令</li><li>git log 看你commit的日志</li><li>git diff 查看尚未暂存的更新</li><li>git rm a.a 移除文件(从暂存区和工作区中删除)</li><li>git rm –cached a.a 移除文件(只从暂存区中删除)</li><li>git commit -m “remove” 移除文件(从Git中删除)</li><li>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)</li><li>git diff –cached 或 $ git diff –staged 查看尚未提交的更新</li><li>git stash push 将文件给push到一个临时空间中</li><li>git stash pop 将文件从临时空间pop下来</li></ul><hr><h3 id="二、进阶"><a href="#二、进阶" class="headerlink" title="二、进阶"></a>二、进阶</h3><p>问题</p><p>1.这个分支是谁的？</p><p>2.代码不小新提交到了其他分支上。</p><p>3.不小心写错了git commit备注 修改当前提交 、修改历史多个。</p><p>4.开发过程中突然接到其中一个功能不做了，但是已经提交了。</p><hr><p>一、merge 、rebase</p><p>1.normal merge (git merge dev_feature_1)   master-&gt;dev</p><p>merge 不能保持 master 分支干净，但是保持了所有的 commit history，大多数情况下都是不好的，个别情况挺好</p><p>it pull = git fetch + git merge</p><p>git push –set-upstream origin dev_test_1_191029</p><p>1.git config –global user.name “”<br>2.git config –global user.email “”<br>3.git config –list</p><p>git rm xxx –cached /git rm xxx -f<br>git mv old.file new.file<br>git commit –amend<br>git commit -m”xxx” –date”2019-10-11”</p><p>git remote -v<br>git remote set-url origin ssh://xxxxx/php/xx</p><p><img src="/images/git_big.jpg" alt="logo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、-基础命令&quot;&gt;&lt;a href=&quot;#一、-基础命令&quot; class=&quot;headerlink&quot; title=&quot;一、 基础命令&quot;&gt;&lt;/a&gt;一、 基础命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git branch 查看本地所有分支&lt;/li&gt;
&lt;li&gt;git status 查看当前
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://justknow23.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Blog 搭建过程</title>
    <link href="http://justknow23.github.io/2018/07/30/contribution-blog/"/>
    <id>http://justknow23.github.io/2018/07/30/contribution-blog/</id>
    <published>2018-07-30T11:11:30.000Z</published>
    <updated>2021-03-22T15:45:12.475Z</updated>
    
    <content type="html"><![CDATA[<p>玩博客有三个阶段:<br>一、是在平台写，但是写着写着就会发现限制太多。比如博客流量来了，你想挂个广告之类的也不行。<br>二、是自己购买域名和vps自己搭建后台，使用wordpress之类的博客系统，然后自己折腾点赞、评论等功能。但是维护麻烦。比如sql问题，ip问题，就要修复整个系统。<br>三、是使用基于github提供的pages静态网页功能，既可以免费，二来迁移方便。你完全可以把整个系统备份到git上，又保证了写作的自由性，不用维护。<br>本文介绍 Mac上搭建基于github的hexo博客过程。</p><p>1.Node.js 进入Node.js官网,一路安装即可。</p><p>因为Xcode自带git，所以就没必要下了，如果没有安装的同学可以移步hexo官方文档去下载git</p><p>2.安装Hexo<br>当Node.js和git安装好，下面就需要安装Hexo了，终端执行以下命令</p><p>sudo npm install -g hexo</p><p>3.Hexo 初始化</p><p>$ hexo init</p><p>$ npm install</p><p>$ hexo s</p><p>此时在浏览器中打开网址<a href="http://localhost:4000相信就可以看到一个静态网页" target="_blank" rel="noopener">http://localhost:4000相信就可以看到一个静态网页</a></p><p>4.关联Github<br>创建Github账号并新建项目<br>项目名称为用户名.github.io的固定写法<br>cd 到blog文件夹下,vim打开_config.yml，命令如下</p><p>$ vim _config.yml<br>打开后滑倒最后，修改成下面的样子,下面的coding是我在codeing上新建的一个项目，因为在github上访问太慢，所以我新建了一个仓库。<br>deploy:<br>      type: git<br>      repository:<br>        github: <a href="https://github.com/justknow23/justknow23.github.io" target="_blank" rel="noopener">https://github.com/justknow23/justknow23.github.io</a><br>      branch: master<br>注意：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错.<br>注意配置信息里面的行缩进，前面的空格很重要！！！！！！</p><p>修改完成之后保存退出，然后输入以下命令</p><p>hexo clean<br>hexo g<br>hexo d</p><p>5.安装主题<br>Hexo官网主题页献给大家大家可以去下载自己喜欢的主题去配置，以下以hexo-theme-next为例<br>终端cd到 blog 目录下执行如下命令：</p><p>$ git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next<br>将blog目录下_config.yml里theme的名称landscape修改为next</p><p>终端cd到blog目录下执行如下命令(每次部署文章的步骤)：</p><p>$ hexo clean   //清除缓存文件 (db.json) 和已生成的静态文件 (public)<br>$ hexo g       //生成缓存和静态文件<br>$ hexo d       //重新部署到服务器<br>至于更改theme内容，比如名称，描述，头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可，</p><p>6.绑定个人域名<br>在/blog/source目录下新建文件名为：CNAME文件，注意没有后缀名！直接将自己的域名如：gengtt.cn写入.</p><p>7.目录结构</p><ul><li>_config.yml站点的配置文件，需要拷贝；</li><li>themes/主题文件夹，需要拷贝；</li><li>source博客文章的.md文件，需要拷贝；</li><li>scaffolds/文章的模板，需要拷贝；</li><li>package.json安装包的名称，需要拷贝；</li><li>.gitignore限定在push时哪些文件可以忽略，需要拷贝；</li><li>.git/主题和站点都有，标志这是一个git项目，不需要拷贝；</li><li>node_modules/是安装包的目录，在执行npm install的时候会重新生成，不需要拷贝；</li><li>public是hexo g生成的静态网页，不需要拷贝；</li><li>.deploy_git同上，hexo g也会生成，不需要拷贝；</li><li>db.json文件，不需要拷贝。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;玩博客有三个阶段:&lt;br&gt;一、是在平台写，但是写着写着就会发现限制太多。比如博客流量来了，你想挂个广告之类的也不行。&lt;br&gt;二、是自己购买域名和vps自己搭建后台，使用wordpress之类的博客系统，然后自己折腾点赞、评论等功能。但是维护麻烦。比如sql问题，ip问题，就
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://justknow23.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>作为一名PHPer，永远不要忘了，你是在写PHP的代码</title>
    <link href="http://justknow23.github.io/2018/07/27/first-blog/"/>
    <id>http://justknow23.github.io/2018/07/27/first-blog/</id>
    <published>2018-07-27T11:49:32.000Z</published>
    <updated>2021-03-22T15:45:12.475Z</updated>
    
    <content type="html"><![CDATA[<ul><li>孔子曾经曰过：源码面前，如同裸奔  </li><li>任何不考虑具体应用场景的编程模式都是耍流氓  </li><li>作为一名PHPer，永远不要忘了，你是在写PHP的代码。  </li><li>生活就是折腾，技术就是倒腾，记录点滴成长进步，保持一颗好奇心。  </li><li>对程序设计来说，源码是最好的老师，一切概念通描述或者加工后都会存在意义上的偏差，只有通过了解源码才能真正领会其中的含义。<br><img src="/images/tuxue.jpg" alt="logo"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;孔子曾经曰过：源码面前，如同裸奔  &lt;/li&gt;
&lt;li&gt;任何不考虑具体应用场景的编程模式都是耍流氓  &lt;/li&gt;
&lt;li&gt;作为一名PHPer，永远不要忘了，你是在写PHP的代码。  &lt;/li&gt;
&lt;li&gt;生活就是折腾，技术就是倒腾，记录点滴成长进步，保持一颗好奇心
      
    
    </summary>
    
    
    
      <category term="语录" scheme="http://justknow23.github.io/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
</feed>
